name: Deploy to AWS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies and build frontend
        run: |
          cd src/stocks-app
          yarn install
          CI=false yarn build

      - name: Get the PEM file ready
        env:
          PEM_FILE: ${{ secrets.SHASHANK_MANDIL_AWS }}
        run: |
          echo "${{ secrets.SHASHANK_MANDIL_AWS }}" > SHASHANK_MANDIL_AWS.pem
          chmod 600 SHASHANK_MANDIL_AWS.pem
          echo "PEM file created and permissions set."

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Check EC2 connection and deploy
        run: |
          # Try to establish an SSH connection
          if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i SHASHANK_MANDIL_AWS.pem ec2-user@ec2-54-175-107-161.compute-1.amazonaws.com exit
          then
            echo "Error: Cannot establish SSH connection. Please check your security group settings and the instance's status."
            exit 1
          fi

          # If we've made it here, we can proceed with the deployment
          scp -i SHASHANK_MANDIL_AWS.pem -r $(find src/ -type d \( -name node_modules -o -name .cache \) -prune -o -print) ec2-user@ec2-54-175-107-161.compute-1.amazonaws.com:~/app

          ssh -o StrictHostKeyChecking=no -i SHASHANK_MANDIL_AWS.pem ec2-user@ec2-54-175-107-161.compute-1.amazonaws.com << 'EOF'
            set -e
          
            # Set NODE_ENV to production
            echo "export NODE_ENV=production" >> ~/.bashrc
            source ~/.bashrc
          
            cd ~/app/src/stocks-app
            sudo yum update -y
            curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
            sudo yum install -y nodejs
            sudo npm install -g yarn pm2
            yarn install
            sudo pm2 stop stocks-app || true
            sudo pm2 start yarn --name "stocks-app" -- start:prod
            
            # Start the backend server.js
            cd ~/app/src/stocks-app
            sudo pm2 stop server || true
            sudo pm2 start server.js --name "server"
          
            cd ~/app/src
            sudo yum install -y python3-pip
            sudo pip3 install --user -r requirements.txt
            cd ~/app/src/StockApi
            sudo pm2 stop DataStockPredictApi || true
            sudo pm2 start DataStockPredictApi.py --name "stock-api" --interpreter python3 --max-memory-restart 200M
            sudo pm2 save

            # Wait for a moment to allow processes to start
            sleep 10

            # Check process status
            echo "PM2 process list:"
            sudo pm2 list

            echo "Checking stocks-app logs:"
            sudo pm2 logs stocks-app --lines 20 --nostream

            echo "Checking stock-api logs:"
            sudo pm2 logs stock-api --lines 20 --nostream
          EOF